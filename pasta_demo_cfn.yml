AWSTemplateFormatVersion: "2010-09-09"

Description: Create Greengrass Resources for the Pasta Demo

Parameters:
  CoreName:
    Description: Green Core name to be created. A "Thing" with be created with _Core appended to the name
    Type: String
    Default: pasta_demo_cfn
  S3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    Default: aws-quickstart
    Type: String

Resources:
  GreengrassGroup:
    Type: AWS::Greengrass::Group
    Properties:
      Name: !Ref CoreName
      RoleArn: !GetAtt GreengrassResourceRole.Arn
      InitialVersion:
        CoreDefinitionVersionArn: !Ref GreengrassCoreDefinitionVersion
        FunctionDefinitionVersionArn: !GetAtt FunctionDefinition.LatestVersionArn
        SubscriptionDefinitionVersionArn: !GetAtt SubscriptionDefinition.LatestVersionArn

  IoTThing:
    # Resource creates thing, certificate key pair, and IoT policy
    Type: Custom::IoTThing
    Properties:
      ServiceToken: !GetAtt CreateThingFunction.Arn
      ThingName: !Join ["_", [!Ref CoreName, "Core"] ]

  CreateThingFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Create thing, certificate, and policy, return cert and private key
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import sys
          import cfnresponse
          import boto3
          from botocore.exceptions import ClientError
          import json
          import logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          policyDocument = {
              'Version': '2012-10-17',
              'Statement': [
                  {
                      'Effect': 'Allow',
                      'Action': 'iot:*',
                      'Resource': '*'
                  },
                  {
                      'Effect': 'Allow',
                      'Action': 'greengrass:*',
                      'Resource': '*'
                  }
              ]
          }


          def handler(event, context):
              responseData = {}
              try:
                  logger.info('Received event: {}'.format(json.dumps(event)))
                  result = cfnresponse.FAILED
                  client = boto3.client('iot')
                  thingName=event['ResourceProperties']['ThingName']
                  if event['RequestType'] == 'Create':
                      thing = client.create_thing(
                          thingName=thingName
                      )
                      response = client.create_keys_and_certificate(
                          setAsActive=True
                      )
                      certId = response['certificateId']
                      certArn = response['certificateArn']
                      certPem = response['certificatePem']
                      privateKey = response['keyPair']['PrivateKey']
                      client.create_policy(
                          policyName='{}-full-access'.format(thingName),
                          policyDocument=json.dumps(policyDocument)
                      )
                      response = client.attach_policy(
                          policyName='{}-full-access'.format(thingName),
                          target=certArn
                      )
                      response = client.attach_thing_principal(
                          thingName=thingName,
                          principal=certArn,
                      )
                      logger.info('Created thing: %s, cert: %s and policy: %s' % 
                          (thingName, certId, '{}-full-access'.format(thingName)))
                      result = cfnresponse.SUCCESS
                      responseData['certificateId'] = certId
                      responseData['certificatePem'] = certPem
                      responseData['privateKey'] = privateKey
                      responseData['iotEndpoint'] = client.describe_endpoint(endpointType='iot:Data-ATS')['endpointAddress']
                  elif event['RequestType'] == 'Update':
                      logger.info('Updating thing: %s' % thingName)
                      result = cfnresponse.SUCCESS
                  elif event['RequestType'] == 'Delete':
                      logger.info('Deleting thing: %s and cert/policy' % thingName)
                      response = client.list_thing_principals(
                          thingName=thingName
                      )
                      for i in response['principals']:
                          response = client.detach_thing_principal(
                              thingName=thingName,
                              principal=i
                          )
                          response = client.detach_policy(
                              policyName='{}-full-access'.format(thingName),
                              target=i
                          )
                          response = client.update_certificate(
                              certificateId=i.split('/')[-1],
                              newStatus='INACTIVE'
                          )
                          response = client.delete_certificate(
                              certificateId=i.split('/')[-1],
                              forceDelete=True
                          )
                          response = client.delete_policy(
                              policyName='{}-full-access'.format(thingName),
                          )
                          response = client.delete_thing(
                              thingName=thingName
                          )
                      result = cfnresponse.SUCCESS
              except ClientError as e:
                  logger.error('Error: {}'.format(e))
                  result = cfnresponse.FAILED
              logger.info('Returning response of: {}, with result of: {}'.format(result, responseData))
              sys.stdout.flush()
              cfnresponse.send(event, context, result, responseData)

  GreengrassCoreDefinition:
    Type: AWS::Greengrass::CoreDefinition
    Properties:
      Name: !Join ["_", [!Ref CoreName, "Core"]]

  GreengrassCoreDefinitionVersion:
    Type: AWS::Greengrass::CoreDefinitionVersion
    Properties:
      CoreDefinitionId: !Ref GreengrassCoreDefinition
      Cores:
        - Id: !Join ["_", [!Ref CoreName, "Core"]]
          ThingArn: !Join
            - ":"
            - - "arn:aws:iot"
              - !Ref AWS::Region
              - !Ref AWS::AccountId
              - !Join
                - "/"
                - - "thing"
                  - !Join ["_", [!Ref CoreName, "Core"]]
          CertificateArn: !Join
            - ":"
            - - "arn:aws:iot"
              - !Ref AWS::Region
              - !Ref AWS::AccountId
              - !Join
                - "/"
                - - "cert"
                  - !GetAtt IoTThing.certificateId
          SyncShadow: "false"

  FunctionDefinition:
    Type: 'AWS::Greengrass::FunctionDefinition'
    Properties:
      Name: FunctionDefinition
      InitialVersion:
        DefaultConfig:
          Execution:
            IsolationMode: GreengrassContainer
        Functions:
          - Id: "CoreShadow"
            FunctionArn: !Ref GGCoreShadowFunctionVersion
            FunctionConfiguration:
              Pinned: 'true'
              Executable: main.py
              MemorySize: '65536'
              Timeout: '300'
              EncodingType: json
              Environment:
                Variables:
                  CORE_NAME: !Ref CoreName
                AccessSysfs: 'true'
                Execution:
                  IsolationMode: GreengrassContainer
                  RunAs:
                    Uid: '1'
                    Gid: '10'
          - Id: "DynamoDB"
            FunctionArn: !Ref GGDynamoDBFunctionVersion
            FunctionConfiguration:
              Pinned: 'true'
              Executable: main.py
              MemorySize: '65536'
              Timeout: '300'
              EncodingType: json
              Environment:
                Variables:
                  CORE_NAME: !Ref CoreName
                AccessSysfs: 'true'
                Execution:
                  IsolationMode: GreengrassContainer
                  RunAs:
                    Uid: '1'
                    Gid: '10'
          - Id: "SystemControl"
            FunctionArn: !Ref GGSystemControlFunctionVersion
            FunctionConfiguration:
              Pinned: 'true'
              Executable: main.py
              MemorySize: '65536'
              Timeout: '300'
              EncodingType: json
              Environment:
                Variables:
                  CORE_NAME: !Ref CoreName
                AccessSysfs: 'true'
                Execution:
                  IsolationMode: GreengrassContainer
                  RunAs:
                    Uid: '1'
                    Gid: '10'
          - Id: "SystemStatus"
            FunctionArn: !Ref GGSystemStatusFunctionVersion
            FunctionConfiguration:
              Pinned: 'true'
              Executable: main.py
              MemorySize: '65536'
              Timeout: '300'
              EncodingType: json
              Environment:
                Variables:
                  CORE_NAME: !Ref CoreName
                AccessSysfs: 'true'
                Execution:
                  IsolationMode: GreengrassContainer
                  RunAs:
                    Uid: '1'
                    Gid: '10'

  SubscriptionDefinition:
    Type: 'AWS::Greengrass::SubscriptionDefinition'
    Properties:
      Name: SubscriptionDefinition
      InitialVersion:
        Subscriptions:
          - Id: Subscription2
            Source: !Ref GGCoreShadowFunctionVersion
            Subject: !Sub '$aws/things/${CoreName}_Core/shadow/update'
            Target: 'GGShadowService'
          - Id: Subscription3
            Source: !Ref GGSystemStatusFunctionVersion
            Subject: 'cb/+/data'
            Target: !Ref GGCoreShadowFunctionVersion
          - Id: Subscription4
            Source: !Ref GGSystemStatusFunctionVersion
            Subject: 'inference/+/data'
            Target: 'cloud'
          - Id: Subscription5
            Source: !Ref GGSystemStatusFunctionVersion
            Subject: 'cb/+/data'
            Target: 'cloud'
          - Id: Subscription6
            Source: 'GGShadowService'
            Subject: !Sub '$aws/things/${CoreName}_Core/shadow/update/documents'
            Target: !Ref GGDynamoDBFunctionVersion
          - Id: Subscription7
            Source: !Ref GGSystemStatusFunctionVersion
            Subject: 'gpu/+/data'
            Target: !Ref GGCoreShadowFunctionVersion
          - Id: Subscription8
            Source: 'GGShadowService'
            Subject: !Sub '$aws/things/${CoreName}_Core/shadow/update/accepted'
            Target: !Ref GGCoreShadowFunctionVersion
          - Id: Subscription9
            Source: !Ref GGSystemStatusFunctionVersion
            Subject: 'led/+/data'
            Target: !Ref GGCoreShadowFunctionVersion
          - Id: Subscription10
            Source: !Ref GGSystemStatusFunctionVersion
            Subject: 'cpu/+/data'
            Target: !Ref GGCoreShadowFunctionVersion
          - Id: Subscription11
            Source: !Ref GGSystemStatusFunctionVersion
            Subject: 'info/+/data'
            Target: !Ref GGCoreShadowFunctionVersion
          - Id: Subscription12
            Source: !Ref GGSystemStatusFunctionVersion
            Subject: 'info/+/data'
            Target: 'cloud'
          - Id: Subscription13
            Source: !Ref GGSystemStatusFunctionVersion
            Subject: 'cpu/+/data'
            Target: 'cloud'
          - Id: Subscription14
            Source: 'cloud'
            Subject: 'led/+/brightness'
            Target: !Ref GGSystemControlFunctionVersion
          - Id: Subscription15
            Source: !Ref GGSystemStatusFunctionVersion
            Subject: 'led/+/data'
            Target: 'cloud'
          - Id: Subscription16
            Source: 'cloud'
            Subject: 'cb/+/speed'
            Target: !Ref GGSystemControlFunctionVersion
          - Id: Subscription17
            Source: !Ref GGSystemStatusFunctionVersion
            Subject: 'inference/+/data'
            Target: !Ref GGCoreShadowFunctionVersion
          - Id: Subscription18
            Source: !Ref GGSystemStatusFunctionVersion
            Subject: 'ram/+/data'
            Target: !Ref GGCoreShadowFunctionVersion
          - Id: Subscription19
            Source: !Ref GGSystemStatusFunctionVersion
            Subject: 'gpu/+/data'
            Target: 'cloud'
          - Id: Subscription20
            Source: !Ref GGSystemStatusFunctionVersion
            Subject: 'ram/+/data'
            Target: 'cloud'
  
  GGSampleFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["_", [!Ref CoreName, "sample"] ]
      Description: Long running lambda that provides telemetry and pub/sub echo
      Handler: index.function_handler
      Runtime: python2.7
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import greengrasssdk
          import platform
          from threading import Timer

          client = greengrasssdk.client('iot-data')

          my_platform = platform.platform()

          def greengrass_hello_world_run():
              if not my_platform:
                  print 'no platform'
                  client.publish(
                      topic='hello/world',
                      payload='Hello world! Sent from Greengrass Core.')
              else:
                  print 'platform'
                  client.publish(
                      topic='hello/world',
                      payload='Hello world! Sent from '
                              'Greengrass Core running on platform: {}'
                              .format(my_platform))

              Timer(5, greengrass_hello_world_run).start()

          greengrass_hello_world_run()

          def function_handler(event, context):
              return

  GGCoreShadowFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "CoreShadow_cfn"
      Description: Core Shadow Pasta Demo
      Handler: main.function_handler
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Sub "${S3BucketName}"
        S3Key: functions/cshadow.zip

  GGDynamoDBFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "DynamoDB_cfn"
      Description: Dynamo DB pasta demo
      Handler: main.function_handler
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Sub "${S3BucketName}"
        S3Key: functions/ddb.zip

  GGSystemControlFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "SystemControl_cfn"
      Description: System control pasta demo
      Handler: main.function_handler
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Sub "${S3BucketName}"
        S3Key: functions/sysctrl.zip

  GGSystemStatusFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "SystemStatus_cfn"
      Description: Long running lambda that provides telemetry and pub/sub echo
      Handler: main.function_handler
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Sub "${S3BucketName}"
        S3Key: functions/sysstats.zip

  GGSampleFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName : !GetAtt GGSampleFunction.Arn

  GGCoreShadowFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName : !GetAtt GGCoreShadowFunction.Arn

  GGDynamoDBFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName : !GetAtt GGDynamoDBFunction.Arn

  GGSystemControlFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName : !GetAtt GGSystemControlFunction.Arn

  GGSystemStatusFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName : !GetAtt GGSystemStatusFunction.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - iot:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - greengrass:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:DescribeReservedInstancesOfferings
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:AttachRolePolicy
                  - iam:GetRole
                  - iam:DeleteRole
                  - iam:PassRole
                Resource:
                  !Join [
                    "",
                    [
                      "arn:aws:iam::",
                      !Ref "AWS::AccountId",
                      ":role/greengrass_cfn_",
                      !Ref "AWS::StackName",
                      "_ServiceRole",
                    ],
                  ]

  GreengrassResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: greengrass.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy

Outputs:
  IoTEndpoint:
    Description: "IoT Endpoint"
    Value: !GetAtt IoTThing.iotEndpoint
  CertificatePem:
    Description: "IoT Certificate Pem"
    Value: !GetAtt IoTThing.certificatePem
  CertificatePrivateKey:
    Description: "IoT Certificate Private Key"
    Value: !GetAtt IoTThing.privateKey
  ConfigJson:
    Description: ""
    Value: !Sub |
      {
        "coreThing" : {
          "caPath" : "root.ca.pem",
          "certPath" : "cert.pem",
          "keyPath" : "cert.key",
          "thingArn" : "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:thing/${CoreName}_Core",
          "iotHost" : "${IoTThing.iotEndpoint}",
          "ggHost" : "greengrass-ats.iot.${AWS::Region}.amazonaws.com"
        },
        "runtime" : {
          "cgroup" : {
            "useSystemd" : "yes"
          }
        },
        "managedRespawn" : false,
        "crypto" : {
          "principals" : {
            "SecretsManager" : {
              "privateKeyPath" : "file:///greengrass/certs/cert.key"
            },
            "IoTCertificate" : {
              "privateKeyPath" : "file:///greengrass/certs/cert.key",
              "certificatePath" : "file:///greengrass/certs/cert.pem"
            }
          },
          "caPath" : "file:///greengrass/certs/root.ca.pem"
        }
      }
